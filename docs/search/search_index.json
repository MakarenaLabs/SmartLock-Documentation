{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SmartLock Design Reference Introduction This documentation describes the architecture and design reference of the MakarenaLabs solution for a SmartLock based on 3D Face Verification. Introduction Project Description Hardware & Software requirements SmartLock on AMD Kria\u2122 KV260 Initial setup configuration Hardware & Software requirements Contacts For any question, please contact: Amanda Emerson : amanda.emerson@amd.com Gordon Lau : gordon.lau@amd.com Robert Green : robert.green@amd.com Enrico Giordano : enrico.giordano@makarenalabs.com Guglielmo Zanni : guglielmo.zanni@makarenalabs.com Brixhilda Koci : brixhilda.koci@makarenalabs.com Matteo Castagnaro : matteo.castagnaro@makarenalabs.com","title":"SmartLock Design Reference"},{"location":"#smartlock-design-reference","text":"","title":"SmartLock Design Reference"},{"location":"#introduction","text":"This documentation describes the architecture and design reference of the MakarenaLabs solution for a SmartLock based on 3D Face Verification. Introduction Project Description Hardware & Software requirements SmartLock on AMD Kria\u2122 KV260 Initial setup configuration Hardware & Software requirements","title":"Introduction"},{"location":"#contacts","text":"For any question, please contact: Amanda Emerson : amanda.emerson@amd.com Gordon Lau : gordon.lau@amd.com Robert Green : robert.green@amd.com Enrico Giordano : enrico.giordano@makarenalabs.com Guglielmo Zanni : guglielmo.zanni@makarenalabs.com Brixhilda Koci : brixhilda.koci@makarenalabs.com Matteo Castagnaro : matteo.castagnaro@makarenalabs.com","title":"Contacts"},{"location":"hw-sw-requirements/","text":"Hardware & Software requirements The SmartLock solution uses different requirements, both software and hardware. In this section all these needs will be explained. Hardware requirements AMD Kria\u2122 KV260 Board The SmartLock solution proposed here was built on the AMD Kria\u2122 KV260 board: Kria\u2122 KV260 : The Kria\u2122 KV260 is built for advanced vision application development without requiring complex hardware design knowledge. For more information, please visit the official website ; Fig. 1 - Kria\u2122 KV260 RGB-IR Camera The architecture of SmartLock solution is based on a RGB-IR camera provided by onsemi and a VCSEL dot projector provided by ams OSRAM . The dot projector is a VCSEL (Vertical Cavity Surface Emitting Laser) projector and is needed to support the reconstruction of the real human face: onsemi Demo3 Kit with its own AR0830CS RGB-IR sensor ; ams OSRAM BELAGO1.1 VCSEL dot projector with its driver board ( ams OSRAM AS1170 ); Fig. 2 - onsemi AR0830CS RGB-IR sensor Fig. 3 - ams OSRAM BELAGO1.1 dot projector Miscellaneous Some other miscellaneous are required: MicroSD card : it must be greater than or equal to 32GB; MicroSD to USB adapter : to burn the image; Full-HD HDMI Monitor and HDMI cable : to set up and start up run the SmartLock solution; Keyboard and mouse kit : to run the commands into the AMD Kria\u2122 KV260 board; The whole hardware setup should be very similar to the image below: onsemi Demo3 Kit with AR0830CS RGB-IR sensor mounted aboard; A stable tripod to install the Demo3 Kit (one of your choice is ok, this model is the Neewer T160A ); USB 3.0 cable provided with the Demo3 Kit; An AMD Kria\u2122 KV260 board with its microSD card; HDMI cable to connect the AMD Kria\u2122 KV260 board to your FullHD monitor; ams OSRAM BELAGO1.1 VCSEL dot projector with its driver board ( ams OSRAM AS1170 ). Please note that the component in the photo above is in a hardware development state, the sample you have should be different; The photo does not include the screen and the keyboard and mouse kit to control the AMD Kria\u2122 KV260 board; Software requirements There are some software that need to be installed into your PC in order to run the solution successfully. First of all, you need to have at least 32GB free on your disk in order to download the image to be burnt (it is more or less 27GB big). To burn the image, you need: 7Zip : to unarchive the downloaded image files; Balena Etcher : to burn the image. You can use one of your choice, but this one is strongly recommended; OS Image Request At this point, you have to download the latest release of the image to burn into the SD card of the AMD Kria\u2122 KV260 board. To do so, please send a request email to MakarenaLabs. Be sure to have at least 32GB of free space in your PC in order to download all the files.","title":"Hardware & Software requirements"},{"location":"hw-sw-requirements/#hardware-software-requirements","text":"The SmartLock solution uses different requirements, both software and hardware. In this section all these needs will be explained.","title":"Hardware &amp; Software requirements"},{"location":"hw-sw-requirements/#hardware-requirements","text":"","title":"Hardware requirements"},{"location":"hw-sw-requirements/#amd-kriatm-kv260-board","text":"The SmartLock solution proposed here was built on the AMD Kria\u2122 KV260 board: Kria\u2122 KV260 : The Kria\u2122 KV260 is built for advanced vision application development without requiring complex hardware design knowledge. For more information, please visit the official website ; Fig. 1 - Kria\u2122 KV260","title":"AMD Kria&trade; KV260 Board"},{"location":"hw-sw-requirements/#rgb-ir-camera","text":"The architecture of SmartLock solution is based on a RGB-IR camera provided by onsemi and a VCSEL dot projector provided by ams OSRAM . The dot projector is a VCSEL (Vertical Cavity Surface Emitting Laser) projector and is needed to support the reconstruction of the real human face: onsemi Demo3 Kit with its own AR0830CS RGB-IR sensor ; ams OSRAM BELAGO1.1 VCSEL dot projector with its driver board ( ams OSRAM AS1170 ); Fig. 2 - onsemi AR0830CS RGB-IR sensor Fig. 3 - ams OSRAM BELAGO1.1 dot projector","title":"RGB-IR Camera"},{"location":"hw-sw-requirements/#miscellaneous","text":"Some other miscellaneous are required: MicroSD card : it must be greater than or equal to 32GB; MicroSD to USB adapter : to burn the image; Full-HD HDMI Monitor and HDMI cable : to set up and start up run the SmartLock solution; Keyboard and mouse kit : to run the commands into the AMD Kria\u2122 KV260 board; The whole hardware setup should be very similar to the image below: onsemi Demo3 Kit with AR0830CS RGB-IR sensor mounted aboard; A stable tripod to install the Demo3 Kit (one of your choice is ok, this model is the Neewer T160A ); USB 3.0 cable provided with the Demo3 Kit; An AMD Kria\u2122 KV260 board with its microSD card; HDMI cable to connect the AMD Kria\u2122 KV260 board to your FullHD monitor; ams OSRAM BELAGO1.1 VCSEL dot projector with its driver board ( ams OSRAM AS1170 ). Please note that the component in the photo above is in a hardware development state, the sample you have should be different; The photo does not include the screen and the keyboard and mouse kit to control the AMD Kria\u2122 KV260 board;","title":"Miscellaneous"},{"location":"hw-sw-requirements/#software-requirements","text":"There are some software that need to be installed into your PC in order to run the solution successfully. First of all, you need to have at least 32GB free on your disk in order to download the image to be burnt (it is more or less 27GB big). To burn the image, you need: 7Zip : to unarchive the downloaded image files; Balena Etcher : to burn the image. You can use one of your choice, but this one is strongly recommended;","title":"Software requirements"},{"location":"hw-sw-requirements/#os-image-request","text":"At this point, you have to download the latest release of the image to burn into the SD card of the AMD Kria\u2122 KV260 board. To do so, please send a request email to MakarenaLabs. Be sure to have at least 32GB of free space in your PC in order to download all the files.","title":"OS Image Request"},{"location":"project-description/","text":"SmartLock Design Reference Introduction The Machine Learning solution uses a combination of 2D and 3D information processing to identify a specific human who wishes to access a restricted area. Architectural Schematic The base architecture of the SmartLock is briefly described in following image: Fig. 1 - SmartLock Design Reference Architecture The system is based on a Machine Learning engine which uses AI models to extract features from both the 2D and 3D acquisition data. Both branches (2D and 3D) have their own dedicated AI model for feature extraction. The extracted information is then fused together in order to compute the authorization process. Below is a brief description of the two branches. 2D Branch This branch computes two different AI models in a cascade mode, first Face Detection and then Face Recognition. Face Detection is an AI model which analyzes an image from a video source. From this image are extracted, if present, the bounding boxes of the faces. The bounding boxes are a cropped version of the original image, containing only the faces, if present. Face Recognition is an AI model which receives the bounding box-cropped image of a face as input and returns a description of the face as output. The Face Recognition AI model is used to determine if the person in front of the SmartLock can be identified as someone who has been saved in the database as an authorized user. Face Detection Face Recognition 3D Branch This branch is used to avoid efforts to spoof the 2D system. The function of this branch is to determine whether the 3D mapping of the person in front of the SmartLock is an human face. This rejects efforts to use images, photos, or other methods which can otherwise be accepted and recognized by the 2D system. This function is made building a point cloud of the real human face using the IR data coming from the onsemi AR0830CS sensor and a dot projector provided by ams OSRAM ( ams OSRAM BELAGO1.1 VCSEL dot projector ) which helps the IR 3D face reconstruction. Fig. 2 - 3D data of a real face","title":"Project Description"},{"location":"project-description/#smartlock-design-reference","text":"","title":"SmartLock Design Reference"},{"location":"project-description/#introduction","text":"The Machine Learning solution uses a combination of 2D and 3D information processing to identify a specific human who wishes to access a restricted area.","title":"Introduction"},{"location":"project-description/#architectural-schematic","text":"The base architecture of the SmartLock is briefly described in following image: Fig. 1 - SmartLock Design Reference Architecture The system is based on a Machine Learning engine which uses AI models to extract features from both the 2D and 3D acquisition data. Both branches (2D and 3D) have their own dedicated AI model for feature extraction. The extracted information is then fused together in order to compute the authorization process. Below is a brief description of the two branches.","title":"Architectural Schematic"},{"location":"project-description/#2d-branch","text":"This branch computes two different AI models in a cascade mode, first Face Detection and then Face Recognition. Face Detection is an AI model which analyzes an image from a video source. From this image are extracted, if present, the bounding boxes of the faces. The bounding boxes are a cropped version of the original image, containing only the faces, if present. Face Recognition is an AI model which receives the bounding box-cropped image of a face as input and returns a description of the face as output. The Face Recognition AI model is used to determine if the person in front of the SmartLock can be identified as someone who has been saved in the database as an authorized user. Face Detection Face Recognition","title":"2D Branch"},{"location":"project-description/#3d-branch","text":"This branch is used to avoid efforts to spoof the 2D system. The function of this branch is to determine whether the 3D mapping of the person in front of the SmartLock is an human face. This rejects efforts to use images, photos, or other methods which can otherwise be accepted and recognized by the 2D system. This function is made building a point cloud of the real human face using the IR data coming from the onsemi AR0830CS sensor and a dot projector provided by ams OSRAM ( ams OSRAM BELAGO1.1 VCSEL dot projector ) which helps the IR 3D face reconstruction. Fig. 2 - 3D data of a real face","title":"3D Branch"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/","text":"Initial setup configuration In this chapter is explained how to setup the hardware to run the example on the AMD Kria\u2122 KV260 board. There are some preliminary steps in order to have the setup completely up and running, that they are described in the section below. Fig. 1 - AMD Kria\u2122 KV260 SmartLock Kit If you received the SmartLock kit, please follow this section. Otherwise, please go ahead with the Preliminary actions chapter. Your kit is composed by: Black 3D printed SmartLock box; AMD Kria\u2122 KV260 Development Kit with 32GB microSD card. It is already flashed with the new version of the SmartLock Ubuntu Image (v3.2.0); AMD Development Tools Basic Accessory for the Kria\u2122 KV260; 3D SmartLock Box Unboxing The video below is showing you the content of the box you received. As in the packaging list paper, you will find: A mini tripod stand in the black bag; An USB 3.0 cable to connect the onsemi Demo 3 kit to the AMD Kria\u2122 KV260 board; An Type-A Type-A USB cable to power on the dot projector (VCSEL); The black box of the SmartLock (3D printed and designed by MakarenaLabs), which contains: onsemi Demo 3 Board (AGB1N0CS-GEVVK) ; onsemi Optical Sensor Dvelopment Tools 8MP (AR0830CSSH11SMKAH3-GEVB) ; ams osram BELAGO1.1 Dot Projector ; ams osram AS1170 Dev Kit (AS1170_WL_EVM_EB) ; As said before, the AMD Kria\u2122 KV260 is already equipped with the flashed microSD card with SmartLock Ubuntu Image v3.2.0, so you can jump to Board connections chapter. Preliminary actions At this step, you should have completed all the requirements provided in the section Hardware & Software requirements . If so, you should have this setup: An AMD Kria\u2122 KV260 board with the flashed SD card using the image provided by MakarenaLabs ; The Demo 3 Development Kit provided by onsemi with the AR0830CS RGB-IR sensor installed on board and its own USB 3.0 cable; The dot projector in the right position as near as possible to the 2D sensor; Your FullHD monitor and the keyboard/mouse kit connected to the AMD Kria\u2122 KV260; Image File Installation Install the OS following these steps: Windows version Download the MakarenaLabs image. They are some files to be merged together with 7Zip; Merge the downloaded image files into a single image file; Verify the SHA-256 hash of the image file. This will ensure that no errors occurred in the transmission and merge of the files: Click Search and run powershell . (Note: cmd will not work); Navigate to the directory containing the image file; Enter Get-FileHash <filename> ; Wait 15 to 30 seconds; The hash value will appear; Flash the MakarenaLabs image file to the microSD card with Balena Etcher. It must be flashed as a boot image; Linux version Download the MakarenaLabs image. They are some files to be merged together with 7Zip; Merge the downloaded image files into a single image file; Verify the SHA-256 hash of the image file. This will ensure that no errors occurred in the transmission and merge of the files: Open the terminal searching on the Linux drawer Terminal or typing Ctrl+Alt+T ; Navigate to the directory containing the image file; Enter sha256sum <filename> ; Wait 15 to 30 seconds; The hash value will appear; Flash the MakarenaLabs image file to the microSD card with Balena Etcher. It must be flashed as a boot image; You can check here the integrity of the image file writing in the field the hash value you got in the step 3.5 of the previous list: .container { display: flex; align-items: center; gap: 10px; max-width: 100%; } input[type=\"text\"] { flex: 1; padding: 8px; font-size: 14px; border: 1px solid #ccc; border-radius: 4px; } button { padding: 8px 12px; font-size: 14px; border: none; border-radius: 4px; background-color: #007BFF; color: white; cursor: pointer; } button:disabled { background-color: #ccc; cursor: not-allowed; } button:hover:not(:disabled) { background-color: #0056b3; } .result { margin-top: 20px; font-weight: bold; } Validate const checksumInput = document.getElementById('checksumInput'); const validateButton = document.getElementById('validateButton'); const resultDiv = document.getElementById('result'); // Enable/disable button based on input field content checksumInput.addEventListener('input', () => { validateButton.disabled = checksumInput.value.trim() === ''; resultDiv.textContent = ''; }); function validateChecksum() { const inputValue = checksumInput.value.trim(); // Example: Replace with your checksum validation logic const expectedChecksum = \"12345abcd\"; // Replace with the actual expected checksum if (inputValue === expectedChecksum) { resultDiv.textContent = \"Checksum is valid!\"; resultDiv.style.color = \"green\"; } else { resultDiv.textContent = \"Checksum is invalid!\"; resultDiv.style.color = \"red\"; } } If the checksum validation is passed, the image is successfully flashed, and you can continue with the next steps. Board connection Now, you are ready to start up the board. To do so, insert the newly flashed SD card into the AMD Kria\u2122 KV260 and connect the HDMI cable into the dedicated port. Now, you can connect the power cable to the connector to boot up the board. NOTE : insert the HDMI cable before the power connector, otherwise you cannot be able to see anything on the screen. So, the steps are: Insert the flashed SD card; Connect the AMD Kria\u2122 KV260 to your monitor via HDMI cable; Connect the power supply to the board in order to power it. When the Kria boots, please check the three LEDs near the fan. The center light should blink and the other two lights should be solid when the board has successfully booted. You should be now in the login screen of Ubuntu 22.04. Fig. 2 - Kria KV260 booting LEDs Log into the ubuntu account using the password makarenalabs . Now, you should see the desktop. At this step, you are ready to connect the SmartLock Box using the USB cables provided in the kit. USB Connections Connect the blue and the black cables into the USB hub on the right of the AMD Kria\u2122 KV260 Fig. 3 - USB Connections AMD Kria\u2122 KV260 and connect also them to the SmartLock Box Fig. 4 - USB Connections SmartLock Box Now, you must wait the onsemi camera to be ready (it takes more or less 10 seconds) before continue. PMOD Connections Then, connect the white and purple cables to the PMOD. Insert the PMOD connectors following the white piece of tape on the PMOD feet on the AMD Kria\u2122 KV260, as shown in the following figure. Fig. 5 - PMOD Connections At this step, you are ready to run the SmartLock Core solution! Go next to know how to do so.","title":"Initial setup configuration"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#initial-setup-configuration","text":"In this chapter is explained how to setup the hardware to run the example on the AMD Kria\u2122 KV260 board. There are some preliminary steps in order to have the setup completely up and running, that they are described in the section below. Fig. 1 - AMD Kria\u2122 KV260","title":"Initial setup configuration"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#smartlock-kit","text":"If you received the SmartLock kit, please follow this section. Otherwise, please go ahead with the Preliminary actions chapter. Your kit is composed by: Black 3D printed SmartLock box; AMD Kria\u2122 KV260 Development Kit with 32GB microSD card. It is already flashed with the new version of the SmartLock Ubuntu Image (v3.2.0); AMD Development Tools Basic Accessory for the Kria\u2122 KV260;","title":"SmartLock Kit"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#3d-smartlock-box-unboxing","text":"The video below is showing you the content of the box you received. As in the packaging list paper, you will find: A mini tripod stand in the black bag; An USB 3.0 cable to connect the onsemi Demo 3 kit to the AMD Kria\u2122 KV260 board; An Type-A Type-A USB cable to power on the dot projector (VCSEL); The black box of the SmartLock (3D printed and designed by MakarenaLabs), which contains: onsemi Demo 3 Board (AGB1N0CS-GEVVK) ; onsemi Optical Sensor Dvelopment Tools 8MP (AR0830CSSH11SMKAH3-GEVB) ; ams osram BELAGO1.1 Dot Projector ; ams osram AS1170 Dev Kit (AS1170_WL_EVM_EB) ; As said before, the AMD Kria\u2122 KV260 is already equipped with the flashed microSD card with SmartLock Ubuntu Image v3.2.0, so you can jump to Board connections chapter.","title":"3D SmartLock Box Unboxing"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#preliminary-actions","text":"At this step, you should have completed all the requirements provided in the section Hardware & Software requirements . If so, you should have this setup: An AMD Kria\u2122 KV260 board with the flashed SD card using the image provided by MakarenaLabs ; The Demo 3 Development Kit provided by onsemi with the AR0830CS RGB-IR sensor installed on board and its own USB 3.0 cable; The dot projector in the right position as near as possible to the 2D sensor; Your FullHD monitor and the keyboard/mouse kit connected to the AMD Kria\u2122 KV260;","title":"Preliminary actions"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#image-file-installation","text":"Install the OS following these steps:","title":"Image File Installation"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#windows-version","text":"Download the MakarenaLabs image. They are some files to be merged together with 7Zip; Merge the downloaded image files into a single image file; Verify the SHA-256 hash of the image file. This will ensure that no errors occurred in the transmission and merge of the files: Click Search and run powershell . (Note: cmd will not work); Navigate to the directory containing the image file; Enter Get-FileHash <filename> ; Wait 15 to 30 seconds; The hash value will appear; Flash the MakarenaLabs image file to the microSD card with Balena Etcher. It must be flashed as a boot image;","title":"Windows version"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#linux-version","text":"Download the MakarenaLabs image. They are some files to be merged together with 7Zip; Merge the downloaded image files into a single image file; Verify the SHA-256 hash of the image file. This will ensure that no errors occurred in the transmission and merge of the files: Open the terminal searching on the Linux drawer Terminal or typing Ctrl+Alt+T ; Navigate to the directory containing the image file; Enter sha256sum <filename> ; Wait 15 to 30 seconds; The hash value will appear; Flash the MakarenaLabs image file to the microSD card with Balena Etcher. It must be flashed as a boot image; You can check here the integrity of the image file writing in the field the hash value you got in the step 3.5 of the previous list: .container { display: flex; align-items: center; gap: 10px; max-width: 100%; } input[type=\"text\"] { flex: 1; padding: 8px; font-size: 14px; border: 1px solid #ccc; border-radius: 4px; } button { padding: 8px 12px; font-size: 14px; border: none; border-radius: 4px; background-color: #007BFF; color: white; cursor: pointer; } button:disabled { background-color: #ccc; cursor: not-allowed; } button:hover:not(:disabled) { background-color: #0056b3; } .result { margin-top: 20px; font-weight: bold; } Validate const checksumInput = document.getElementById('checksumInput'); const validateButton = document.getElementById('validateButton'); const resultDiv = document.getElementById('result'); // Enable/disable button based on input field content checksumInput.addEventListener('input', () => { validateButton.disabled = checksumInput.value.trim() === ''; resultDiv.textContent = ''; }); function validateChecksum() { const inputValue = checksumInput.value.trim(); // Example: Replace with your checksum validation logic const expectedChecksum = \"12345abcd\"; // Replace with the actual expected checksum if (inputValue === expectedChecksum) { resultDiv.textContent = \"Checksum is valid!\"; resultDiv.style.color = \"green\"; } else { resultDiv.textContent = \"Checksum is invalid!\"; resultDiv.style.color = \"red\"; } } If the checksum validation is passed, the image is successfully flashed, and you can continue with the next steps.","title":"Linux version"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#board-connection","text":"Now, you are ready to start up the board. To do so, insert the newly flashed SD card into the AMD Kria\u2122 KV260 and connect the HDMI cable into the dedicated port. Now, you can connect the power cable to the connector to boot up the board. NOTE : insert the HDMI cable before the power connector, otherwise you cannot be able to see anything on the screen. So, the steps are: Insert the flashed SD card; Connect the AMD Kria\u2122 KV260 to your monitor via HDMI cable; Connect the power supply to the board in order to power it. When the Kria boots, please check the three LEDs near the fan. The center light should blink and the other two lights should be solid when the board has successfully booted. You should be now in the login screen of Ubuntu 22.04. Fig. 2 - Kria KV260 booting LEDs Log into the ubuntu account using the password makarenalabs . Now, you should see the desktop. At this step, you are ready to connect the SmartLock Box using the USB cables provided in the kit.","title":"Board connection"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#usb-connections","text":"Connect the blue and the black cables into the USB hub on the right of the AMD Kria\u2122 KV260 Fig. 3 - USB Connections AMD Kria\u2122 KV260 and connect also them to the SmartLock Box Fig. 4 - USB Connections SmartLock Box Now, you must wait the onsemi camera to be ready (it takes more or less 10 seconds) before continue.","title":"USB Connections"},{"location":"boards/amd-kria-kv260/initial-setup-configuration/#pmod-connections","text":"Then, connect the white and purple cables to the PMOD. Insert the PMOD connectors following the white piece of tape on the PMOD feet on the AMD Kria\u2122 KV260, as shown in the following figure. Fig. 5 - PMOD Connections At this step, you are ready to run the SmartLock Core solution! Go next to know how to do so.","title":"PMOD Connections"},{"location":"boards/amd-kria-kv260/run-smartlock/","text":"Running the example on the AMD Kria\u2122 KV260 board Once you have completed the setup of the hardware parts, you can run the SmartLock Solution! In this chapter is explained how to run the example on the AMD Kria\u2122 KV260 board. Before to run the SmartLock Core software, you have to populate the database of the users faces' features with the faces you want to be recognized. Otherwise, the sofware still correctly running, but not recognizing anyone as expected. Populate Faces' Features Database The first step is to add the features of your face to the database. You can do that using the take-a-pic tool. Execution Before starting the execution, verify that the camera is correctly connected via USB port on the Kria\u2122 board: Open a Terminal searching the application on the Ubuntu drawer or press Ctrl+Alt+T ; Go to the SmartLock Core root directory with: cd smartlock-core-onsemi/ Execute the tool with the command ./take-a-pic_v3.2.0 and place yourself in front of the camera. Follow the monitor tool instructions. You will have to press the c key to take a pic, or the q button to quit. You should now see a new line on the terminal asking to insert the name of the file. Please insert it without the file extension (i.e. guglielmo , not guglielmo.png ). Start demo software Let's start with the run of the software. Open a Terminal searching the application on the Ubuntu drawer or press Ctrl+Alt+T (if you are still in the previous terminal, jump to the step 3); Go to the SmartLock Core root directory with: cd smartlock-core-onsemi/ Run the smartlock.exe executable without any parameter. An example is: ./smartlock_v3.2.0 Place your face in front of the camera in order to be detected and, once the face is recognized, the flow stucks and asks you to press the r button on the keyboard to restart the recognition flow. In this case, a virtual door is opened for you! Otherwise, the recognition flow still continue to run and it is waiting to recognize someone while the virtual door keeps closed.","title":"Run the code"},{"location":"boards/amd-kria-kv260/run-smartlock/#running-the-example-on-the-amd-kriatm-kv260-board","text":"Once you have completed the setup of the hardware parts, you can run the SmartLock Solution! In this chapter is explained how to run the example on the AMD Kria\u2122 KV260 board. Before to run the SmartLock Core software, you have to populate the database of the users faces' features with the faces you want to be recognized. Otherwise, the sofware still correctly running, but not recognizing anyone as expected.","title":"Running the example on the AMD Kria&trade; KV260 board"},{"location":"boards/amd-kria-kv260/run-smartlock/#populate-faces-features-database","text":"The first step is to add the features of your face to the database. You can do that using the take-a-pic tool.","title":"Populate Faces' Features Database"},{"location":"boards/amd-kria-kv260/run-smartlock/#execution","text":"Before starting the execution, verify that the camera is correctly connected via USB port on the Kria\u2122 board: Open a Terminal searching the application on the Ubuntu drawer or press Ctrl+Alt+T ; Go to the SmartLock Core root directory with: cd smartlock-core-onsemi/ Execute the tool with the command ./take-a-pic_v3.2.0 and place yourself in front of the camera. Follow the monitor tool instructions. You will have to press the c key to take a pic, or the q button to quit. You should now see a new line on the terminal asking to insert the name of the file. Please insert it without the file extension (i.e. guglielmo , not guglielmo.png ).","title":"Execution"},{"location":"boards/amd-kria-kv260/run-smartlock/#start-demo-software","text":"Let's start with the run of the software. Open a Terminal searching the application on the Ubuntu drawer or press Ctrl+Alt+T (if you are still in the previous terminal, jump to the step 3); Go to the SmartLock Core root directory with: cd smartlock-core-onsemi/ Run the smartlock.exe executable without any parameter. An example is: ./smartlock_v3.2.0 Place your face in front of the camera in order to be detected and, once the face is recognized, the flow stucks and asks you to press the r button on the keyboard to restart the recognition flow. In this case, a virtual door is opened for you! Otherwise, the recognition flow still continue to run and it is waiting to recognize someone while the virtual door keeps closed.","title":"Start demo software"},{"location":"boards/amd-kria-kv260/testbench/","text":"Kria KV260 Testbench This is a guide on how to validate the FaceRecognition AI model on the KV260 board. To run the validation testbench you need to have: Kria KV260 board; Ubuntu 22.04 image (username: ubuntu , password: makarenalabs ); MuseBox License @MakarenaLabs ; The MuseBox License is really important, without it you won't be able to run the testbench. In order to obtain the license, you need to request the node locker license. The license is valid for a specific board, so you cannot use the license on a different node. For the license request, you need to create the license request file. To do that, simply run this command: sudo license_request This command generates the file license_request.req in the path /usr/local . You need to send to us the file via email at staff@makarenalabs.com with the subject MuseBox License request and with the message body I accept your evaluation license agreement . Our internal system will check if the email is associated to a valid customer, then, according to your signed contract, the system will respond to you with the license file, called license.lic . When you receive the license file, you need to place the file in this path: /usr/local/bin . Once you have your license, you should go to a browser and go to http://<kria_board_ip>:9090 . The password to insert is xilinx . Go inside the MuseBox folder and open validate_face_recognition.ipynb . Now you can run all the cells and run the testbench. When you run the first cell: import cv2 import os import numpy as np from FaceRecognitionSL import FaceRecognition you should see as output: Checking license... License ok On the other hand, if you get any error and the kernel seems to die, it may be an error with the license. You can change the maximum length of the images to run the validation on, by changing the variable: max_len_images = 1000 and you can change the Face Recognition similarity threshold by changing the variable: threshold = 0.12","title":"Kria KV260 Testbench"},{"location":"boards/amd-kria-kv260/testbench/#kria-kv260-testbench","text":"This is a guide on how to validate the FaceRecognition AI model on the KV260 board. To run the validation testbench you need to have: Kria KV260 board; Ubuntu 22.04 image (username: ubuntu , password: makarenalabs ); MuseBox License @MakarenaLabs ; The MuseBox License is really important, without it you won't be able to run the testbench. In order to obtain the license, you need to request the node locker license. The license is valid for a specific board, so you cannot use the license on a different node. For the license request, you need to create the license request file. To do that, simply run this command: sudo license_request This command generates the file license_request.req in the path /usr/local . You need to send to us the file via email at staff@makarenalabs.com with the subject MuseBox License request and with the message body I accept your evaluation license agreement . Our internal system will check if the email is associated to a valid customer, then, according to your signed contract, the system will respond to you with the license file, called license.lic . When you receive the license file, you need to place the file in this path: /usr/local/bin . Once you have your license, you should go to a browser and go to http://<kria_board_ip>:9090 . The password to insert is xilinx . Go inside the MuseBox folder and open validate_face_recognition.ipynb . Now you can run all the cells and run the testbench. When you run the first cell: import cv2 import os import numpy as np from FaceRecognitionSL import FaceRecognition you should see as output: Checking license... License ok On the other hand, if you get any error and the kernel seems to die, it may be an error with the license. You can change the maximum length of the images to run the validation on, by changing the variable: max_len_images = 1000 and you can change the Face Recognition similarity threshold by changing the variable: threshold = 0.12","title":"Kria KV260 Testbench"}]}